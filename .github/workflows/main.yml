# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  REGISTRY: gcr.io
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  IMAGE_NAME: test
  
  

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    environment: production
    # env:
    #   IMAGE_NAME: gcr.io/${{ env.PROJECT_ID }}/${{ secrets.GCP_APP_NAME }}
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    
    #Install kubectl
    - name: Install Kubectl
      uses: azure/setup-kubectl@v3   
      with:
        version: 'v1.21.3' 
      id: install
    
    # Setup gcloud CLI
    - uses: google-github-actions/setup-gcloud@v0
      with:
        version: '270.0.0'
        service_account_key: ${{ secrets.GCP_CREDENTIALS }}
        service_account_email: ${{ secrets.GCP_EMAIL }}
        project_id: ${{ env.PROJECT_ID }}

    - name: Login GCR
      id: login_gcr
      uses: elgohr/gcloud-login-action@v1
      with:
        account_key: ${{ secrets.GCP_CREDENTIALS }}
    
    - name: Build and push to prod and beta
      uses: RafikFarhad/push-to-gcr-github-action@v5-beta
      with:
        gcloud_service_key: ${{ secrets.GCP_CREDENTIALS }}
        registry: ${{ env.REGISTRY }}
        project_id: ${{ env.PROJECT_ID }}
        image_name: ${{ env.IMAGE_NAME }}
        image_tag: ${{ github.sha }}
        context: .
   
    - name: get the image and update the deployment file
      run: |
        DOCKER_IMAGE=`gcloud container images describe ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.IMAGE_NAME }}:${{ github.sha }} --format="value(image_summary.digest)"`
        echo "$DOCKER_IMAGE"
        sed 's@CONTAINER_IMAGE@'"${{ env.REGISTRY }}\/${{ env.PROJECT_ID }\/${{ env.IMAGE_NAME }}$DOCKER_IMAGE"'@' deployment.yml
        cat deployment.yml
        
#     # Deploy the application in GKE
#     - name: Deploy the application
#       uses: tale/kubectl-action@v1
#       with:
#         base64-kube-config: ${{ secrets.KUBE_CONFIG }}
#     - run: |
#         kubectl get node    
#         kubectl apply -f deployment.yml
#         kubectl get pods
#         kubectl get svc
